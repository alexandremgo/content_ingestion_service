name: General

on: [push, pull_request]

env:
  CARGO_TERM_COLOR: always
  SQLX_VERSION: 0.6.3
  SQLX_FEATURES: "rustls,postgres"

# Cancels in-progress job or run from the same concurrency group
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true
  
jobs:
  # TODO: fix the tests, or run tests only on certain services
  # test:
  #   name: Test
  #   runs-on: ubuntu-latest
  #   services:
  #     postgres:
  #       image: postgres:14
  #       env:
  #         POSTGRES_USER: postgres
  #         POSTGRES_PASSWORD: password
  #         POSTGRES_DB: postgres
  #       ports:
  #         - 5432:5432
  #   steps:
  #     - name: Check out repository code
  #       uses: actions/checkout@v3

  #       # This GitHub Action installs a Rust toolchain using rustup. It is designed for one-line concise usage and good defaults.
  #     - name: Install the Rust toolchain
  #       uses: dtolnay/rust-toolchain@stable

  #     # A GitHub Action that implements smart caching for rust/cargo projects with sensible defaults.
  #     - name: Rust Cache Action
  #       uses: Swatinem/rust-cache@v2
  #       with:
  #         # An additional cache key that is added alongside the automatic `job`-based cache key 
  #         # and can be used to further differentiate jobs. default: empty
  #         key: sqlx-${{ env.SQLX_VERSION }}

  #     - name: Install sqlx-cli
  #       run:
  #           cargo install sqlx-cli
  #           --version=${{ env.SQLX_VERSION }}
  #           --features ${{ env.SQLX_FEATURES }}
  #           --no-default-features
  #           --locked
  #           # The --locked flag can be used to force Cargo to use the packaged Cargo.lock file if it is available. 
  #           # This may be useful for ensuring reproducible builds, to use the exact same set of dependencies that were available when the package was published. 

  #     - name: Install postgresql-client
  #       run: sudo apt-get update && sudo apt-get install postgresql-client -y

  #     - name: Migrate database
  #       run: SKIP_DOCKER=true ./scripts/init_db.sh

  #     - name: Check sqlx-data.json is up-to-date
  #       run: cargo sqlx prepare --check -- --bin zero2prod

  #     - name: Run tests
  #       run: cargo test

  # `fmt` container job
  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
        with:
          # Specific to dtolnay/rust-toolchain: Comma-separated string of additional components to install
          components: rustfmt
      - name: Enforce formatting
        run: cargo fmt --check

  # `clippy` container job
  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
      - uses: Swatinem/rust-cache@v2
        with:
          key: sqlx-${{ env.SQLX_VERSION }}
      - name: Install sqlx-cli
        run:
          cargo install sqlx-cli
            --version=${{ env.SQLX_VERSION }}
            --features ${{ env.SQLX_FEATURES }}
            --no-default-features
            --locked
      - name: Install postgresql-client
        run: sudo apt-get update && sudo apt-get install postgresql-client -y
      - name: Migrate database
        run: SKIP_DOCKER=true ./scripts/init_containers.sh
      - name: Linting
        working-directory: ./content_ingestion_service
        run: cargo clippy --no-deps -- -D warnings
