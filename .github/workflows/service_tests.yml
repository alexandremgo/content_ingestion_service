name: Service Tests

on: 
  push:
    paths:
    - "content_ingestion_service/**"
    - ".github/workflows/service_tests.yml"
  pull_request:

env:
  CARGO_TERM_COLOR: always
  SQLX_VERSION: 0.6.3
  SQLX_FEATURES: "rustls,postgres"

# Cancels in-progress job or run from the same concurrency group
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

defaults:
  run:
    working-directory: content_ingestion_service

jobs:
  test:
    name: Service Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
      rabbitmq:
        image: rabbitmq:3.12.0-management
        ports:
          - "5672:5672"
          - "15672:15672"
        env:
          RABBITMQ_DEFAULT_USER: guest
          RABBITMQ_DEFAULT_PASS: guest

    steps:
      - name: Check out repository code
        uses: actions/checkout@v3

      - name: Setup minio
        run: |
          docker run -d -p 9000:9000 --name minio \
            -e "MINIO_ROOT_USER=minio" \
            -e "MINIO_ROOT_PASSWORD=password" \
            -e "MINIO_SITE_REGION=eu-fr-1" \
            -e "MINIO_SITE_NAME=par-rack-1" \
            -v /tmp/data:/data \
            -v /tmp/config:/root/.minio \
            minio/minio server /data

          export AWS_ACCESS_KEY_ID=minio
          export AWS_SECRET_ACCESS_KEY=password
          export AWS_EC2_METADATA_DISABLED=true
          aws --endpoint-url http://127.0.0.1:9000/ s3 mb s3://integration-tests-bucket --region=eu-fr-1  

        # This GitHub Action installs a Rust toolchain using rustup. It is designed for one-line concise usage and good defaults.
      - name: Install the Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      # A GitHub Action that implements smart caching for rust/cargo projects with sensible defaults.
      - name: Rust Cache Action
        uses: Swatinem/rust-cache@v2
        with:
          # An additional cache key that is added alongside the automatic `job`-based cache key 
          # and can be used to further differentiate jobs. default: empty
          key: sqlx-${{ env.SQLX_VERSION }}

      - name: Install sqlx-cli
        run:
            cargo install sqlx-cli
            --version=${{ env.SQLX_VERSION }}
            --features ${{ env.SQLX_FEATURES }}
            --no-default-features
            --locked
            # The --locked flag can be used to force Cargo to use the packaged Cargo.lock file if it is available. 

      - name: Install postgresql-client
        run: sudo apt-get update && sudo apt-get install postgresql-client -y

      - name: Migrate database
        run: SKIP_DOCKER=true SKIP_MEILISEARCH=true ../scripts/init_infra.sh

      - name: Check sqlx-data.json is up-to-date
        run: cargo sqlx prepare --check -- --bin zero2prod

      - name: Run tests
        run: RUST_LOG="sqlx=error,info" TEST_LOG=enabled cargo test

  # `cargo fmt` job
  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
        with:
          # Specific to dtolnay/rust-toolchain: Comma-separated string of additional components to install
          components: rustfmt
      - name: Enforce formatting
        run: cargo fmt --check

  # `cargo clippy` job
  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
      - uses: Swatinem/rust-cache@v2
        with:
          key: sqlx-${{ env.SQLX_VERSION }}
      - name: Install sqlx-cli
        run:
          cargo install sqlx-cli
            --version=${{ env.SQLX_VERSION }}
            --features ${{ env.SQLX_FEATURES }}
            --no-default-features
            --locked
      - name: Install postgresql-client
        run: sudo apt-get update && sudo apt-get install postgresql-client -y
      - name: Migrate database
        run: SKIP_DOCKER=true SKIP_MEILISEARCH=true ./scripts/init_infra.sh
      - name: Linting
        working-directory: ./content_ingestion_service
        run: cargo clippy --no-deps -- -D warnings
